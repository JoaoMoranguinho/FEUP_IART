package jade_project;

import java.util.ArrayList;
import javax.swing.JTextArea;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JTextPane;
import javax.swing.JEditorPane;
import javax.swing.JFormattedTextField;
import nrc.fuzzy.FuzzyException;
import nrc.fuzzy.FuzzyRule;
import nrc.fuzzy.FuzzyValue;
import nrc.fuzzy.FuzzyValueVector;
import nrc.fuzzy.FuzzyVariable;
import nrc.fuzzy.LFuzzySet;
import nrc.fuzzy.LeftLinearFunction;
import nrc.fuzzy.RFuzzySet;
import nrc.fuzzy.RightLinearFunction;
import nrc.fuzzy.TriangleFuzzySet;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



public class HomePage extends javax.swing.JFrame {

	JFormattedTextField tmp,tmp1;
	double fanRpm=402.55;
	int temp=5;
    public ArrayList<Double> crispTemp;
    public ArrayList<Double> fanRpmV;
    public int counter=0;
    /**
     * Creates new form HomePage
     */
    public HomePage() {
        crispTemp= new ArrayList<Double>();
        fanRpmV = new ArrayList<Double>();
        callFuzzy();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGap(0, 835, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGap(0, 155, Short.MAX_VALUE)
        );
        jPanel1.setLayout(jPanel1Layout);
        jButton1 = new javax.swing.JButton();
        
                jButton1.setText("Randomize Temperature");
                jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        jButton1MousePressed(evt);
                    }
                });
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1ActionPerformed(evt);
                    }
                });
        
        JEditorPane editorPane = new JEditorPane();
        
        JFormattedTextField frmtdtxtfldAirtempvalue = new JFormattedTextField();
        tmp=frmtdtxtfldAirtempvalue;
        tmp.setText("AirTempValue");
        
        JFormattedTextField dtrpnFantempvalue = new JFormattedTextField();
        tmp1=dtrpnFantempvalue;
        tmp1.setText("FanTempValue");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jButton1)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(editorPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(648, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(94)
        			.addComponent(frmtdtxtfldAirtempvalue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(dtrpnFantempvalue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(687, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(50)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jButton1)
        				.addComponent(editorPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(44)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(frmtdtxtfldAirtempvalue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(dtrpnFantempvalue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(110, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    
    }                                        

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        
    	String s1=String.valueOf(this.fanRpm);
    	this.tmp.setText(String.valueOf(crispTemp.get(counter)));
    	this.tmp1.setText(String.valueOf(fanRpmV.get(counter)));
        if(counter>19)
            counter=0;
        else counter++;
    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }
    
    public void callFuzzy(){
     FuzzyRule coldTemp = new FuzzyRule(); FuzzyRule OKTemp = new FuzzyRule();
     FuzzyRule hotTemp = new FuzzyRule(); FuzzyValueVector fanSpeedfvv = null;
     FuzzyValue globalFanSpeedfv = null, currentTempfv = null;
     FuzzyVariable airTemp = null, fanSpeed = null;
     RightLinearFunction rlf = new RightLinearFunction();
     LeftLinearFunction llf = new LeftLinearFunction();
     try
     { // define the fuzzy variables for air temperature and fan speed
     // with their associated linguistic terms
     airTemp = new FuzzyVariable("airTemperature", 0.0, 100.0, "Deg C");
     airTemp.addTerm("cold", new RFuzzySet(0.0, 20.0, rlf));
     airTemp.addTerm("OK", new TriangleFuzzySet(0.0, 20.0, 35.0));
     airTemp.addTerm("hot", new LFuzzySet(20.0, 35.0, llf));
     fanSpeed = new FuzzyVariable("fanSpeed", 0.0, 1000.0, "RPM");
     fanSpeed.addTerm("low", new RFuzzySet(0.0, 500.0, rlf));
     fanSpeed.addTerm("medium", new TriangleFuzzySet(250.0, 500.0, 750.0));
     fanSpeed.addTerm("high", new LFuzzySet(500.0, 1000.0, llf));
     // define the 3 fuzzy rules each with a single antecedent and
     // a single conclusion fuzzy value
     coldTemp.addAntecedent(new FuzzyValue(airTemp,"cold"));
     coldTemp.addConclusion(new FuzzyValue(fanSpeed,"low"));
     OKTemp.addAntecedent(new FuzzyValue(airTemp,"OK"));
     OKTemp.addConclusion(new FuzzyValue(fanSpeed,"medium"));
     hotTemp.addAntecedent(new FuzzyValue(airTemp,"hot"));
     hotTemp.addConclusion(new FuzzyValue(fanSpeed,"high"));
     }
     catch (FuzzyException fe)
     { System.err.println("Error initializing fuzzy variables/rules\n" + fe);
     System.exit(100);
     }
     
     for (double t = 0.0; t <= 40.0; t = t + 2.0)
     { // since each rule that fires can generate a fuzzy value for the
     // fan speed we need to assimilate all of the fuzzy value outputs
     // into a single global fuzzy value (globalFanSpeedfv)
         int i=0;
     globalFanSpeedfv = null;
     // clear inputs to rules on each iteration so we can set the new ones
     coldTemp.removeAllInputs(); OKTemp.removeAllInputs();
     hotTemp.removeAllInputs();
     try
     { // add inputs to rules; note that we convert the crisp temperature
     // to a fuzzy value - this process is known as fuzzification
     currentTempfv = new FuzzyValue(airTemp, new TriangleFuzzySet(t,t,t));
     coldTemp.addInput(currentTempfv); OKTemp.addInput(currentTempfv);
     hotTemp.addInput(currentTempfv);
     // execute the 3 rules and determine fan speed in global FuzzyValue
     // globalFanSpeedfv; for each rule test to see if rule input(s) match
     // antecedent(s) and if so execute rule; if rule fires add resultant fan
     // speed fuzzy value to global fan speed by performing a fuzzy union
     if (coldTemp.testRuleMatching())
     { fanSpeedfvv = coldTemp.execute();
     if (globalFanSpeedfv == null)
     globalFanSpeedfv = fanSpeedfvv.fuzzyValueAt(0);
     else
     globalFanSpeedfv =
     globalFanSpeedfv.fuzzyUnion(fanSpeedfvv.fuzzyValueAt(0));
     }
     if (OKTemp.testRuleMatching())
     { fanSpeedfvv = OKTemp.execute();
     if (globalFanSpeedfv == null)
     globalFanSpeedfv = fanSpeedfvv.fuzzyValueAt(0);
     else
     globalFanSpeedfv =
     globalFanSpeedfv.fuzzyUnion(fanSpeedfvv.fuzzyValueAt(0));
     }
     if (hotTemp.testRuleMatching())
     { fanSpeedfvv = hotTemp.execute();
     if (globalFanSpeedfv == null)
     globalFanSpeedfv = fanSpeedfvv.fuzzyValueAt(0);
     else
     globalFanSpeedfv =
     globalFanSpeedfv.fuzzyUnion(fanSpeedfvv.fuzzyValueAt(0));
     }
     // output the result for the given air temperature – the fan speed
     // fuzzy value is defuzzified to give a crisp result
     crispTemp.add(t);
     fanRpmV.add(globalFanSpeedfv.momentDefuzzify());
     
     }
     catch (FuzzyException fe)
     { System.err.println(fe); System.exit(100);}
    }
     // iterate over a range of temperatures determining the fan speed that
     // should be selected for that temperature
     
}
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
}
